import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import quandl
import statsmodel.api as sm


class Cointegrator(object):
  def __init__(self, x, y): # using these classic tickers instead of stock1 and stock2
    if x[-1] > y[-1]:
      self.X = np.array(quandl.get("WIKI/" + y).loc[:, "Close"].tolist())
      self.Y = np.array(quandl.get("WIKI/" + x).loc[:, "Close"].tolist())
    else:
      self.X = np.array(quandl.get("WIKI/" + x).loc[:, "Close"].tolist())
      self.Y = np.array(quandl.get("WIKI/" + y).loc[:, "Close"].tolist())
    if len(self.X) > len(self.Y):
      self.X = self.X[-len(self.Y):]
    else:
      self.Y = self.Y[-len(self.X):]
    self.diffX, self.diffY = np.diff(self.X), np.diff(self.Y)
     
   
  def adf(self):
    X = sm.adfuller(self.diffX)[1]
    Y = sm.adfuller(self.diffY)[1]
    if X < .05 and Y < .05:
      return True
    else:
      return False
  
  def engel_granger(self):
    adf = self.adf()
    if adf:
        if self.diffX[-1] > self.diffY[-1]:
          small = self.diffY
          large = self.diffX
        else:
          small = self.diffX
          large = self.diffY
        def test(small=small, large=large):
          modelX = sm.add_constant(small)
          model = sm.OLS(large, modelX)
          results = model.fit()
          ws = results.params
          yhat = small * ws[1] + ws[0]
          residuals = large - yhat
          resid = sm.adfuller(residuals)
          if resid[1] > .05
            self.cointegrated = False
          else:
            self.cointegrated = True
          
    
    
